@model Notification
@inject IUserService UserService
@{
    var sender = await UserService.GetUserByIdAsync(Model.SenderId);
}

<li class="dropdown__item">
    <a href="#">
        <div class="pull-left clearfix">
            <img src="@sender.GetProfilePicture()" alt="User Image">
        </div>
        <small>
            <i class="fa fa-clock-o"></i> <time class="timeago" datetime="@Model.CreatedOn.ToString("o")"></time>
        </small>

        @switch (Model.Type)
        {
            case NotificationType.Like:
                <p><strong>@sender.FullName </strong> liked your post.</p>
                break;

            case NotificationType.Comment:
                <p><strong>@sender.FullName </strong> commented on your post.</p>
                break;

            case NotificationType.Following:
                <p><strong>@sender.FullName </strong>is now following you.</p>
                break;

            case NotificationType.UnFollowed:
                <p><strong>@sender.FullName </strong> unfollowed you.</p>
                break;


            case NotificationType.SentFriendRequest:
                <p><strong>@sender.FullName </strong> sent you a friend request.</p>
                break;


            case NotificationType.AcceptedFriendRequest:
                <p>You and <strong>@sender.FullName </strong> are now friends.</p>
                break;


            case NotificationType.RejectedFriendRequest:
                <p>@sender.FullName rejected your friend request.</p>
                break;
        }

    </a>

</li>